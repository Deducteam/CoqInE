#!/bin/sh

##################################
#
#  Configuration script for Coqine
#
##################################

VERSION=trunk
VOMAGIC=08300
STATEMAGIC=58211
DATE=`LANG=C date +"%B %Y"`

# Create the bin/ directory if non-existent
test -d bin || mkdir bin

# a local which command for sh
which () {
    IFS=":" # set words separator in PATH to be ':' (it allows spaces in dirnames)
    for i in $PATH; do
	if test -z "$i"; then i=.; fi
	if [ -f "$i/$1" ] ; then
            echo "$i/$1"
	    break
	fi
    done
    IFS=" "
}

usage () {
    printf "Available options for configure are:\n"
    echo "-help"
    printf "\tDisplays this help page\n"
    echo "-prefix <dir>"
    printf "\tSet installation directory to <dir>\n"
    echo "-local"
    printf "\tSet installation directory to the current source tree\n"
    echo "-src"
    printf "\tSpecifies the source directory\n"
    echo "-bindir"
    echo "-libdir"
    echo "-mandir"
    echo "-docdir"
    printf "\tSpecifies where to install bin/lib/man/doc files resp.\n"
    echo "-camldir"
    printf "\tSpecifies the path to the OCaml library\n"
    echo "-camlp5dir"
    printf "\tSpecifies where to look for the Camlp5 library and tells to use it\n"
    echo "-arch"
    printf "\tSpecifies the architecture\n"
    echo "-opt"
    printf "\tSpecifies whether or not to use OCaml *.opt optimized compilers\n"
    echo "-natdynlink (yes|no)"
    printf "\tSpecifies whether or not to use dynamic loading of native code\n"
    echo "-with-doc (yes|no)"
    printf "\tSpecifies whether or not to compile the documentation\n"
    echo "-with-cc <file>"
    echo "-with-ar <file>"
    echo "-with-ranlib <file>"
    printf "\tTells configure where to find gcc/ar/ranlib executables\n"
    echo "-byte-only"
    printf "\tCompiles only bytecode version of Coqine\n"
    echo "-debug"
    printf "\tAdd debugging information in the Coqine executables\n"
    echo "-profile"
    printf "\tAdd profiling information in the Coqine executables\n"
    echo "-annotate"
    printf "\tCompiles Coqine with -dtypes option\n"
}


# Default OCaml binaries
bytecamlc=ocamlc
nativecamlc=ocamlopt
ocamlmklibexec=ocamlmklib
ocamlexec=ocaml
ocamldepexec=ocamldep
ocamldocexec=ocamldoc
ocamllexexec=ocamllex
camlp4oexec=camlp4o


coqine_debug_flag=
coqine_debug_flag_opt=
coqine_profile_flag=
coqine_annotate_flag=
best_compiler=opt
cflags="-fno-defer-pop -Wall -Wno-unused"
natdynlink=yes

gcc_exec=gcc
ar_exec=ar
ranlib_exec=ranlib

local=false
src_spec=no
prefix_spec=no
bindir_spec=no
libdir_spec=no
mandir_spec=no
docdir_spec=no
camldir_spec=no
arch_spec=no
with_doc=all
with_doc_spec=no

COQINESRC=`pwd`

# Parse command-line arguments

while : ; do
  case "$1" in
    "") break;;
    -help|--help) usage
	          exit;;
    -prefix|--prefix) prefix_spec=yes
                      prefix="$2"
		      shift;;
    -local|--local) local=true;;
    -src|--src) src_spec=yes
                COQINESRC="$2"
	        shift;;
    -bindir|--bindir) bindir_spec=yes
                      bindir="$2"
		      shift;;
    -libdir|--libdir) libdir_spec=yes
                      libdir="$2"
		      shift;;
    -mandir|--mandir) mandir_spec=yes
                      mandir="$2"
		      shift;;
    -docdir|--docdir) docdir_spec=yes
                      docdir="$2"
		      shift;;
    -camldir|--camldir) camldir_spec=yes
	                camldir="$2"
			shift;;
    -camlp5dir|--camlp5dir)
	                camlp5dir="$2"
			shift;;
    -arch|--arch) arch_spec=yes
                  arch=$2
		  shift;;
    -opt|--opt) bytecamlc=ocamlc.opt
                camlp4oexec=camlp4o  # can't add .opt since dyn load'll be required
                nativecamlc=ocamlopt.opt;;
    -natdynlink|--natdynlink) case "$2" in
	                  yes) natdynlink=yes;;
                          *) natdynlink=no
                        esac
                        shift;;
    -with-doc|--with-doc) with_doc_spec=yes
		      case "$2" in
			  yes|all) with_doc=all;;
			  *) with_doc=no
		      esac
		      shift;;
    -with-cc|-with-gcc|--with-cc|--with-gcc)
	  gcc_spec=yes
	  gcc_exec=$2
	  shift;;
    -with-ar|--with-ar)
	  ar_spec=yes
	  ar_exec=$2
	  shift;;
    -with-ranlib|--with-ranlib)
	  ranlib_spec=yes
	  ranlib_exec=$2
	  shift;;
    -byte-only|-byteonly|--byteonly|--byte-only) best_compiler=byte;;
    -debug|--debug) coqine_debug_flag=-g;;
    -profile|--profile) coqine_profile_flag=-p;;
    -annotate|--annotate) coqine_annotate_flag=-dtypes;;
    *) echo "Unknown option \"$1\"." 1>&2; usage; exit 2;;
  esac
  shift
done

if [ $prefix_spec = yes -a $local = true ] ; then
  echo "Options -prefix and -local are incompatible"
  echo "Configure script failed!"
  exit 1
fi

# compile date
DATEPGM=`which date`
case $DATEPGM in
    "") echo "I can't find the program \"date\" in your path."
        echo "Please give me the current date"
	read COMPILEDATE;;
    *)  COMPILEDATE=`date +"%h %d %Y %H:%M:%S"`;;
esac

# Architecture

case $arch_spec in
    no)
    # First we test if we are running a Cygwin system
    if [ `uname -s | cut -c -6` = "CYGWIN" ] ; then
	ARCH="win32"
    else
	# If not, we determine the architecture
	if test -x /bin/arch ; then
 	    ARCH=`/bin/arch`
 	elif test -x /usr/bin/arch ; then
 	    ARCH=`/usr/bin/arch`
 	elif test -x /usr/ucb/arch ; then
 	    ARCH=`/usr/ucb/arch`
 	elif test -x /bin/uname ; then
 	    ARCH=`/bin/uname -s`
 	elif test -x /usr/bin/uname ; then
 	    ARCH=`/usr/bin/uname -s`
	else
	    echo "I can not automatically find the name of your architecture"
	    printf "%s"\
		"Give me a name, please [win32 for Win95, Win98 or WinNT]: "
	    read ARCH
	fi
    fi;;
    yes) ARCH=$arch
esac

# executable extension

case $ARCH in
    win32)
      EXE=".exe"
      DLLEXT=".dll";;
    *) EXE=""
       DLLEXT=".so"
esac

# Is the source tree checked out from a recognised
# version control system ?
if test -e .svn/entries ; then
    checkedout=svn
elif [ -d '{arch}' ]; then
	checkedout=gnuarch
elif [ -z "${GIT_DIR}" ] && [ -d .git ] || [ -d "${GIT_DIR}" ]; then
    checkedout=git
else
    checkedout=0
fi

# make command

MAKE=`which make`
if [ "$MAKE" != "" ]; then
  MAKEVERSION=`$MAKE -v | head -1`
  case $MAKEVERSION in
    "GNU Make 3.81")
      echo "You have GNU Make 3.81. Good!";;
    "GNU Make 3.82")
      echo "You have GNU Make 3.82. Good!";;
    *)
      OK="no"
      if [ -x ./make ]; then
	  MAKEVERSION=`./make -v | head -1`
	  if [ "$MAKEVERSION" == "GNU Make 3.81" ]; then OK="yes"; fi
      fi
      if [ $OK = "no" ]; then
	  echo "GNU Make >= 3.81 is needed"
	  echo "Make 3.81 can be downloaded from ftp://ftp.gnu.org/gnu/make/make-3.81.tar.gz"
	  echo "then locally installed on a Unix-style system by issuing:"
	  echo "  tar xzvf make-3.81.tar.gz"
	  echo "  cd make-3.81"
          echo "  ./configure"
          echo "  make"
          echo "  mv make .."
	  echo "  cd .."
	  echo "Restart then the configure script and later use ./make instead of make"
	  exit 1
      else
	  echo "You have locally installed GNU Make 3.81. Good!"
      fi
  esac
else
  echo "Cannot find GNU Make 3.81"
fi

#########################################
# Objective Caml programs

case $camldir_spec in
    no) CAMLC=`which $bytecamlc`
	case "$CAMLC" in
	    "") echo "$bytecamlc is not present in your path!"
		echo "Give me manually the path to the $bytecamlc executable [/usr/local/bin by default]: "
		read CAMLC

		case "$CAMLC" in
		    "") CAMLC=/usr/local/bin/$bytecamlc;;
		    */ocamlc|*/ocamlc.opt) true;;
		    */) CAMLC="${CAMLC}"$bytecamlc;;
		    *) CAMLC="${CAMLC}"/$bytecamlc;;
		esac
	esac
	CAMLBIN=`dirname "$CAMLC"`;;
    yes) CAMLC=$camldir/$bytecamlc

         CAMLBIN=`dirname "$CAMLC"`
	 bytecamlc="$CAMLC"
	 nativecamlc=$CAMLBIN/$nativecamlc
	 ocamlexec=$CAMLBIN/ocaml
	 ocamldepexec=$CAMLBIN/ocamldep
	 ocamldocexec=$CAMLBIN/ocamldoc
	 ocamlmklibexec=$CAMLBIN/ocamlmklib
	 camlp4oexec=$CAMLBIN/camlp4o
esac

if test ! -f "$CAMLC" ; then
    echo "I can not find the executable '$CAMLC'! (Have you installed it?)"
    echo "Configuration script failed!"
    exit 1
fi

# Under Windows, OCaml only understands Windows filenames (C:\...)
case $ARCH in
    win32) CAMLBIN=`cygpath -m ${CAMLBIN}`;;
esac

# this fixes a camlp4 bug under FreeBSD
# ("native-code program cannot do a dynamic load")
if [ `uname -s` = "FreeBSD" ]; then camlp4oexec=$camlp4oexec.byte; fi

CAMLVERSION=`"$bytecamlc" -version`

case $CAMLVERSION in
    1.*|2.*|3.00|3.01|3.02|3.03|3.03alpha|3.04|3.05beta|3.05|3.06|3.08.0)
	echo "Your version of Objective-Caml is $CAMLVERSION."
	if [ "$CAMLVERSION" = "3.08.0" ] ; then
	    echo "You need Objective-Caml 3.07 or later (to the exception of 3.08.0)!"
	else
	    echo "You need Objective-Caml 3.07 or later!"
	fi
	echo "Configuration script failed!"
	exit 1;;
    3.07*|3.08*)
	echo "You have Objective-Caml $CAMLVERSION. Good!";;
    ?*)
	CAMLP4COMPAT="-loc loc"
	echo "You have Objective-Caml $CAMLVERSION. Good!";;
    *)
	echo "I found the Objective-Caml compiler but cannot find its version number!"
	echo "Is it installed properly?"
	echo "Configuration script failed!"
	exit 1;;
esac

CAMLTAG=OCAML`echo $CAMLVERSION | sed -e "s/\([1-9]\)\.\([0-9]*\).*/\1\2/g"`

# For coqinemktop & bytecode compiler

case $ARCH in
    win32) # Awfull trick to get around a ^M problem at the end of CAMLLIB
      CAMLLIB=`"$CAMLC" -where | sed -e 's/^\(.*\)$/\1/'` ;;
    *)
      CAMLLIB=`"$CAMLC" -where`
esac

# We need to set va special flag for OCaml 3.07
case  $CAMLVERSION in
	3.07*)
	  cflags="$cflags -DOCAML_307";;
esac

if [ "$coqine_debug_flag" = "-g" ]; then
    case $CAMLTAG in
        OCAML31*)
            # Compilation debug flag
            coqine_debug_flag_opt="-g"
            ;;
    esac
fi

# Native dynlink
if [ "$natdynlink" = "yes" -a -f `"$CAMLC" -where`/dynlink.cmxa ]; then
    HASNATDYNLINK=true
else
    HASNATDYNLINK=false
fi

case $HASNATDYNLINK,`uname -s`,`uname -r`,$CAMLVERSION in
    true,Darwin,9.*,3.11.*)  # ocaml 3.11.0 dynlink on MacOS 10.5 is buggy
        NATDYNLINKFLAG=os5fixme;;
    *)
        NATDYNLINKFLAG=$HASNATDYNLINK;;
esac

# Camlp4 / Camlp5 configuration

if [ "$camlp5dir" != "" ]; then
    CAMLP4=camlp5
    CAMLP4LIB=$camlp5dir
    if [ ! -f $camlp5dir/camlp5.cma ]; then
	echo "Cannot find camlp5 libraries in $camlp5dir (camlp5.cma not found)"
	echo "Configuration script failed!"
	exit 1
    fi
    camlp4oexec=`echo $camlp4oexec | sed -e 's/4/5/'`
    # if [ `$camlp4oexec -pmode 2>&1` = "strict" ]; then
    # 	echo "Error: Camlp5 found, but in strict mode!"
    # 	echo "Please compile Camlp5 in transitional mode."
    # 	exit 1
    # fi
else
    case $CAMLTAG in
        OCAML31*)
            if [ -x "${CAMLLIB}/camlp5" ]; then
                CAMLP4LIB=+camlp5
            elif [ -x "${CAMLLIB}/site-lib/camlp5" ]; then
                CAMLP4LIB=+site-lib/camlp5
            else
	        echo "Objective Caml $CAMLVERSION found but no Camlp5 installed."
	        echo "Configuration script failed!"
	        exit 1
            fi
            CAMLP4=camlp5
            camlp4oexec=`echo $camlp4oexec | sed -e 's/4/5/'`
            # if [ `$camlp4oexec -pmode 2>&1` = "strict" ]; then
	    #     echo "Error: Camlp5 found, but in strict mode!"
	    #     echo "Please compile Camlp5 in transitional mode."
	    #     exit 1
            # fi
            ;;
        *)
            CAMLP4=camlp4
            CAMLP4LIB=+camlp4
            ;;
    esac
fi

if [ "$CAMLP4" = "camlp5" ] && `$camlp4oexec -v 2>&1 | grep -q 5.00`; then
    echo "Camlp5 version 5.00 not supported: versions 4.0x or >= 5.01 are OK."
    echo "Configuration script failed!"
    exit 1
fi


case $CAMLP4LIB in
    +*) FULLCAMLP4LIB=$CAMLLIB/`echo $CAMLP4LIB | cut -b 2-`;;
    *)  FULLCAMLP4LIB=$CAMLP4LIB;;
esac

# Assume that camlp(4|5) binaries are at the same place as ocaml ones
# (this should become configurable some day)
CAMLP4BIN=${CAMLBIN}

# do we have a native compiler: test of ocamlopt and its version

if [ "$best_compiler" = "opt" ] ; then
  if test -e "$nativecamlc" || test -e "`which $nativecamlc`"; then
      CAMLOPTVERSION=`"$nativecamlc" -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
      if [ "`uname -s`" = "Darwin" -a "$ARCH" = "i386" ]; then
	  case $CAMLOPTVERSION in
	      3.09.3|3.1?*) ;;
	      *) echo "Native compilation on MacOS X Pentium requires Objective-Caml >= 3.09.3,"
		 best_compiler=byte
		 echo "only the bytecode version of Coqine will be available."
	  esac
      elif [ ! -f $FULLCAMLP4LIB/gramlib.cmxa ]; then
	  best_compiler=byte
	  echo "Cannot find native-code $CAMLP4,"
	  echo "only the bytecode version of Coqine will be available."
      else
        if [ "$CAMLOPTVERSION" != "$CAMLVERSION" ] ; then
	  echo "Native and bytecode compilers do not have the same version!"
        fi
        echo "You have native-code compilation. Good!"
      fi
  else
      best_compiler=byte
      echo "You have only bytecode compilation."
  fi
fi

# OS dependent libraries

case $ARCH in
  sun4*) OS=`uname -r`
	case $OS in
	   5*) OS="Sun Solaris $OS"
	       OSDEPLIBS="-cclib -lunix -cclib -lnsl -cclib -lsocket";;
	   *) OS="Sun OS $OS"
	      OSDEPLIBS="-cclib -lunix"
        esac;;
  alpha) OSDEPLIBS="-cclib -lunix";;
  win32) OS="Win32"
	 OSDEPLIBS="-cclib -lunix"
	 cflags="-mno-cygwin $cflags";;
  *) OSDEPLIBS="-cclib -lunix"
esac

# strip command

case $ARCH in
    win32)
	# true -> strip : it exists under cygwin !
	STRIPCOMMAND="strip";;
    *)
    if [ "$coqine_profile_flag" = "-p" ] || [ "$coqine_debug_flag" = "-g" ] ||
       [ "`uname -s`" = "Darwin" -a "$HASNATDYNLINK" = "true" ]
    then
	STRIPCOMMAND="true"
    else
	STRIPCOMMAND="strip"
    fi
esac


# Search for coq library
if [ -f `which locate` ]
then
    COQLIB=`locate -n 1 -r "coq/theories"`
fi

while test "$COQLIB" != "quit" -a ! -e "$COQLIB/Init/Logic.vo"
do
    echo "Coq library not found. Please enter its location (coq/theories directory, enter quit to abort):"
    read COQLIB
done

if [ -e "$COQLIB/Init/Logic.vo" ]
then
    echo "Coq library found in $COQLIB"
else
    COQLIB=""
    echo "Not setting Coq library path."
fi

# "
### Test if documentation can be compiled (latex, hevea)

if test "$with_doc" = "all"
then
    if test "`which latex`" = ""
    then
	echo "latex was not found; documentation will not be available"
	with_doc=no
    else
	if test "`which hevea`" = ""
	then
	    with_doc=no
	    echo "hevea was not found: documentation will not be available"
	fi
    fi
fi

###########################################
# bindir, libdir, mandir, docdir, etc.

case $src_spec in
  no) COQINETOP=${COQINESRC}
esac

# OCaml only understand Windows filenames (C:\...)
case $ARCH in
    win32) COQINETOP=`cygpath -m ${COQINETOP}`
esac

case $ARCH in
  win32)
	 bindir_def='C:\coqine\bin'
	 libdir_def='C:\coqine\lib'
	 mandir_def='C:\coqine\man'
	 docdir_def='C:\coqine\doc'
	 ;;
  *)
	 bindir_def=/usr/local/bin
	 libdir_def=/usr/local/lib/coqine
	 mandir_def=/usr/local/man
	 docdir_def=/usr/local/share/doc/coqine
esac

case $bindir_spec/$prefix_spec/$local in
    yes/*/*) BINDIR=$bindir ;;
    */yes/*) BINDIR=$prefix/bin ;;
    */*/true) BINDIR=$COQINETOP/bin ;;
    *) printf "Where should I install the Coqine binaries [$bindir_def]? "
        read BINDIR
	case $BINDIR in
	    "") BINDIR=$bindir_def;;
	    *) true;;
	esac;;
esac

case $libdir_spec/$prefix_spec/$local in
    yes/*/*) LIBDIR=$libdir;;
    */yes/*)
        case $ARCH in
          win32) LIBDIR=$prefix ;;
          *)  LIBDIR=$prefix/lib/coqine ;;
        esac ;;
    */*/true) LIBDIR=$COQINETOP ;;
    *)  printf "Where should I install the Coqine library [$libdir_def]? "
        read LIBDIR
	case $LIBDIR in
	    "") LIBDIR=$libdir_def;;
	    *) true;;
	esac;;
esac

case $mandir_spec/$prefix_spec/$local in
    yes/*/*) MANDIR=$mandir;;
    */yes/*) MANDIR=$prefix/man ;;
    */*/true) MANDIR=$COQINETOP/man ;;
    *)  printf "Where should I install the Coqine man pages [$mandir_def]? "
        read MANDIR
	case $MANDIR in
	    "") MANDIR=$mandir_def;;
	    *) true;;
	esac;;
esac

case $docdir_spec/$prefix_spec/$local in
    yes/*/*) DOCDIR=$docdir;;
    */yes/*) DOCDIR=$prefix/share/doc/coqine ;;
    */*/true) DOCDIR=$COQINETOP/man ;;
    *)  printf "Where should I install the Coqine documentation [$docdir_def]? "
        read DOCDIR
	case $DOCDIR in
	    "") DOCDIR=$docdir_def;;
	    *) true;;
	esac;;
esac

# Determine if we enable -custom by default (Windows and MacOS)
CUSTOM_OS=no
if [ "$ARCH" = "win32" ] || [ "`uname -s`" = "Darwin" ]; then
    CUSTOM_OS=yes
fi

###########################################
# Summary of the configuration

echo ""
echo "  Coqine top directory              : $COQINETOP"
echo "  Architecture                      : $ARCH"
if test ! -z "$OS" ; then
  echo "  Operating system                : $OS"
fi
echo "  OS dependent libraries            : $OSDEPLIBS"
echo "  Objective-Caml/Camlp4 version     : $CAMLVERSION"
echo "  Objective-Caml/Camlp4 binaries in : $CAMLBIN"
echo "  Objective-Caml library in         : $CAMLLIB"
echo "  Camlp4 library in                 : $CAMLP4LIB"
if test "$best_compiler" = opt ; then
echo "  Native dynamic link support       : $HASNATDYNLINK"
fi
echo "  Coq library path                  : $COQLIB"
if test "$with_doc" = "all"; then
echo "  Documentation                     : All"
else
echo "  Documentation                     : None"
fi

echo "  Paths for true installation:"
echo "    binaries      will be copied in $BINDIR"
echo "    library       will be copied in $LIBDIR"
echo "    man pages     will be copied in $MANDIR"
echo "    documentation will be copied in $DOCDIR"
echo ""

##################################################
# Building the $COQINETOP/dev/ocamldebug-coqine file
##################################################

OCAMLDEBUGCOQINE=$COQINESRC/dev/ocamldebug-coqine

if test "$coqine_debug_flag" = "-g" ; then
  rm -f $OCAMLDEBUGCOQINE
  sed -e "s|COQINETOPDIRECTORY|$COQINETOP|" \
      -e "s|COQINELIBDIRECTORY|$LIBDIR|" \
      -e "s|CAMLBINDIRECTORY|$CAMLBIN|" \
      -e "s|CAMLP4LIBDIRECTORY|$FULLCAMLP4LIB|"\
      $OCAMLDEBUGCOQINE.template > $OCAMLDEBUGCOQINE
  chmod a-w,a+x $OCAMLDEBUGCOQINE
fi

##############################################
# Creation of configuration files
##############################################

mlconfig_file="$COQINESRC/config/coqine_config.ml"
config_file="$COQINESRC/config/local.mk"
config_template="$COQINESRC/config/local.mk.in"


### Warning !!
### After this line, be careful when using variables,
### since some of them (e.g. $COQINESRC) will be escaped


# An escaped version of a variable
escape_var () {
"$ocamlexec" 2>&1 1>/dev/null <<EOF
  prerr_endline(String.escaped(Sys.getenv"$VAR"));;
EOF
}

# damned backslashes under M$Windows
case $ARCH in
    win32)
	COQINETOP=`echo $COQINETOP |sed -e 's|\\\|\\\\\\\|g'`
	BINDIR=`echo $BINDIR |sed -e 's|\\\|\\\\\\\|g'`
	COQINESRC=`cygpath -m $COQINESRC |sed -e 's|\\\|\\\\\\\|g'`
	LIBDIR=`echo $LIBDIR |sed -e 's|\\\|\\\\\\\|g'`
	CAMLBIN=`echo $CAMLBIN |sed -e 's|\\\|\\\\\\\|g'`
	CAMLLIB=`echo $CAMLLIB |sed -e 's|\\\|\\\\\\\|g'`
	MANDIR=`echo $MANDIR |sed -e 's|\\\|\\\\\\\|g'`
	DOCDIR=`echo $DOCDIR |sed -e 's|\\\|\\\\\\\|g'`
	CAMLP4BIN=`echo $CAMLP4BIN |sed -e 's|\\\|\\\\\\\|g'`
	CAMLP4LIB=`echo $CAMLP4LIB |sed -e 's|\\\|\\\\\\\|g'`
	ocamlexec=`echo $ocamlexec |sed -e 's|\\\|\\\\\\\|g'`
	bytecamlc=`echo $bytecamlc |sed -e 's|\\\|\\\\\\\|g'`
	nativecamlc=`echo $nativecamlc |sed -e 's|\\\|\\\\\\\|g'`
	ocamlmklibexec=`echo $ocamlmklibexec |sed -e 's|\\\|\\\\\\\|g'`
	ocamldepexec=`echo $ocamldepexec |sed -e 's|\\\|\\\\\\\|g'`
	ocamldocexec=`echo $ocamldocexec |sed -e 's|\\\|\\\\\\\|g'`
	camlp4oexec=`echo $camlp4oexec |sed -e 's|\\\|\\\\\\\|g'`
    ;;
esac

#####################################################
# Building the $COQINETOP/config/coqine_config.ml file
#####################################################

rm -f "$mlconfig_file"
cat << END_OF_COQINE_CONFIG > $mlconfig_file
(* DO NOT EDIT THIS FILE: automatically generated by ../configure *)

let local = $local
let coqinelib = "$LIBDIR"
let coqinesrc = "$COQINESRC"
let ocaml = "$ocamlexec"
let ocamlc = "$bytecamlc"
let ocamlopt = "$nativecamlc"
let ocamlmklib = "$ocamlmklibexec"
let ocamldep = "$ocamldepexec"
let ocamldoc = "$ocamldocexec"
let camlbin = "$CAMLBIN"
let camllib = "$CAMLLIB"
let camlp4 = "$CAMLP4"
let camlp4o = "$camlp4oexec"
let camlp4bin = "$CAMLP4BIN"
let camlp4lib = "$CAMLP4LIB"
let camlp4compat = "$CAMLP4COMPAT"
let cflags = "$cflags"
let best = "$best_compiler"
let arch = "$ARCH"
let has_natdynlink = $HASNATDYNLINK
let natdynlinkflag = "$NATDYNLINKFLAG"
let osdeplibs = "$OSDEPLIBS"
let version = "$VERSION"
let caml_version = "$CAMLVERSION"
let date = "$DATE"
let compile_date = "$COMPILEDATE"
let vo_magic_number = $VOMAGIC
let state_magic_number = $STATEMAGIC
let exec_extension = "$EXE"
let coq_library_path = "$COQLIB"

END_OF_COQINE_CONFIG

chmod a-w "$mlconfig_file"


###############################################
# Building the $COQINETOP/config/Makefile file
###############################################

rm -f "$config_file"

sed -e "s|LOCALINSTALLATION|$local|" \
    -e "s|COQINESRCDIRECTORY|$COQINESRC|" \
    -e "s|COQINEVERSION|$VERSION|" \
    -e "s|BINDIRDIRECTORY|$BINDIR|" \
    -e "s|COQINELIBDIRECTORY|$LIBDIR|" \
    -e "s|BUILDLDPATH=|$BUILDLDPATH|" \
    -e "s|MANDIRDIRECTORY|$MANDIR|" \
    -e "s|DOCDIRDIRECTORY|$DOCDIR|" \
    -e "s|ARCHITECTURE|$ARCH|" \
    -e "s|OSDEPENDENTLIBS|$OSDEPLIBS|" \
    -e "s|OSDEPENDENTP4OPTFLAGS|$OSDEPP4OPTFLAGS|" \
    -e "s|CAMLLIBDIRECTORY|$CAMLLIB|" \
    -e "s|CAMLTAG|$CAMLTAG|" \
    -e "s|CAMLP4BINDIRECTORY|$CAMLP4BIN|" \
    -e "s|CAMLP4LIBDIRECTORY|$CAMLP4LIB|" \
    -e "s|CAMLP4TOOL|$camlp4oexec|" \
    -e "s|CAMLP4COMPATFLAGS|$CAMLP4COMPAT|" \
    -e "s|COQINEDEBUGFLAGOPT|$coqine_debug_flag_opt|" \
    -e "s|COQINEDEBUGFLAG|$coqine_debug_flag|" \
    -e "s|COQINEPROFILEFLAG|$coqine_profile_flag|" \
    -e "s|CAMLANNOTATEFLAG|$coqine_annotate_flag|" \
    -e "s|CCOMPILEFLAGS|$cflags|" \
    -e "s|BESTCOMPILER|$best_compiler|" \
    -e "s|DLLEXTENSION|$DLLEXT|" \
    -e "s|EXECUTEEXTENSION|$EXE|" \
    -e "s|BYTECAMLC|$bytecamlc|" \
    -e "s|OCAMLMKLIBEXEC|$ocamlmklibexec|" \
    -e "s|NATIVECAMLC|$nativecamlc|" \
    -e "s|OCAMLEXEC|$ocamlexec|" \
    -e "s|OCAMLDEPEXEC|$ocamldepexec|" \
    -e "s|OCAMLDOCEXEC|$ocamldocexec|" \
    -e "s|CCEXEC|$gcc_exec|" \
    -e "s|AREXEC|$ar_exec|" \
    -e "s|RANLIBEXEC|$ranlib_exec|" \
    -e "s|STRIPCOMMAND|$STRIPCOMMAND|" \
    -e "s|CHECKEDOUTSOURCETREE|$checkedout|" \
    -e "s|WITHDOCOPT|$with_doc|" \
    -e "s|HASNATIVEDYNLINK|$NATDYNLINKFLAG|" \
      "$config_template" > "$config_file"

chmod a-w "$config_file"

##################################################
# The end
####################################################

echo "If anything in the above is wrong, please restart './configure'"
echo
echo "*Warning* To compile the system for a new architecture"
echo "          don't forget to do a 'make archclean' before './configure'."
