# Generic Makefile to run Coqine

# Variables
COQ_MAKEFILE ?= coq_makefile
COQTOP       ?= coqtop
DKCHECK      ?= dk check
DKDEP        ?= dk dep
VERBOSE      ?=

OUTFOLDER = out
COQINEPATH=../../src
COQINE_SRC=../../_build/install/default/lib
COQINE_LIB=../../_build/install/default/lib/coq/user-contrib/Coqine Coqine

DKS = $(wildcard $(OUTFOLDER)/*.dk)
DKOS = $(DKS:.dk=.dko)

.PHONY: all	compile generate depend check clean

.SUFFIXES: .dk .dko

# Because the [.dk] files are generated by make, the dependencies cannot be
#	precalculated, so we need to call make twice.
all: compile generate depend
	make check  # Call make again so that it include the updated depend file
	rm CoqMakefile

# Compile the local [.v] files that are not part of the stdlib
compile: CoqMakefile
	make -f CoqMakefile

$(OUTFOLDER):
	mkdir $(OUTFOLDER)

# Generate the [.dk] files by executing [main.v]
generate: compile $(OUTFOLDER)
	$(COQTOP) -nois -batch -debug -R $(COQINEPATH) Coqine -R . Top -l main
#	rm $(OUTFOLDER)/Coq__Init__Specif.dk
#	rm $(OUTFOLDER)/Coq__Init__Tactics.dk
#	rm $(OUTFOLDER)/Coq__Init__Peano.dk
#	rm $(OUTFOLDER)/Coq__Init__Nat.dk

# Generate the dependencies of [.dk] files
depend:
	$(DKDEP) -I $(OUTFOLDER) $(OUTFOLDER)/*.dk > .depend

# Check and compile the generated [.dk]
check: $(DKOS)

%.dko: %.dk depend
	$(DKCHECK) -I $(OUTFOLDER) --eta -e $<

clean: CoqMakefile
	make -f CoqMakefile - clean
	rm -rf $(OUTFOLDER) .depend .*.aux *.vo *.dk *.dko *.conf
	rm -f CoqMakefile
	rm -f debug.out

CoqMakefile: Make
	$(COQ_MAKEFILE) -f Make -o CoqMakefile

-include .depend
