

(;-----------------------------------------------------------------;)
(;-------------------------  Coq encoding  ------------------------;)
(;-----------------------------------------------------------------;)

(;-------------------------  Nat definition  ----------------------;)

Nat : Type.
z : Nat.
s : Nat -> Nat.


(;----------------------  CTS Sorts definition  -------------------;)

prop : Sort.
type : Nat -> Sort.

def set   : Sort := type z.
def type0 : Sort := type (s z).

def max : Nat -> Nat -> Nat.
[i  ] max i     z     --> i
[  j] max z     j     --> j
[i,j] max (s i) (s j) --> s (max i j).

(;
Coqine sprop = prop
Coqine prop  = prop
Coqine type  = type
Coqine set   = set
Coqine type0 = type0

Coqine Lvl    = Nat (; Universe polymorphism quantification space ;)
Coqine lvl0   = z   (; Nat representation of lowest level (Set) ;)
Coqine lvlS   = s   (; Nat representation of Type@{i+1} ;)
Coqine lvlMax = max (; Nat representation of Type@{max(i,j)} ;)
;)


(;----------------  Non linear equality predicate  ----------------;)

def Eq : Nat -> Nat -> Bool.
[i] Eq i i --> true.

(;---------------------  CTS Axiom definition  --------------------;)

[  j] Axiom prop     (type j) --> true
[i,j] Axiom (type i) (type j) --> Eq (s i) j.


(;-----------------------  CTS Rule definition  -------------------;)

[     ] Rule _        prop     prop     --> true
[i    ] Rule prop     i        i        --> true
[i,j,k] Rule (type i) (type j) (type k) --> Eq (max i j) k.


(;-------------------  CTS Cumulativity definition  ---------------;)

[   ] Cumul prop     prop     --> true
[i  ] Cumul prop     (type i) --> true
[i,j] Cumul (type i) (type j) --> Eq (max i j) j.


(;-----------------------------  Level LUB  -----------------------;)

[s  ] sup prop     s        --> s
[s  ] sup s        prop     --> s
[i,j] sup (type i) (type j) --> type (max i j).


(;------------------------  Other definitions  -------------------;)

(; These functions are provided to simplify the translation.
   - Axiom s (axiom s)       should reduce to true
   - Rule s1 s2 (rule s1 s2) should reduce to true
;)


def axiom : Sort -> Sort.
[]  axiom prop     --> type z
[i] axiom (type i) --> type (s i).
(;  Coqine axiom = axiom  ;)

[x] Axiom x (axiom x) --> true.


def rule : Sort -> Sort -> Sort.
[s  ] rule prop     s        --> s
[   ] rule _        prop     --> prop
[i,j] rule (type i) (type j) --> type (max i j).
(;  Coqine rule = rule  ;)

[s1,s2] Rule s1 s2 (rule s1 s2) --> true.
