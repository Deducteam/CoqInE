


(;-----------------------------------------------------------------;)
(;-------------------------  Coq encoding  ------------------------;)
(;-----------------------------------------------------------------;)

(;-------------------------  Nat definition  ----------------------;)

Nat : Type.     (; Type of predicative Type levels ;)
def s : Nat -> Nat.
z : Nat.
(; Set is the smallest (predicative) Type. ;)
(; Careful:  Coq's   Type@{0} = Type@{Set+1}   is    type (s z)  ;)



(;----------------------  CTS Sorts definition  -------------------;)

prop : Sort.
type : Nat -> Sort.

def set   : Sort := type z.
def type0 : Sort := type (s z).

(;
Coqine prop  = prop
Coqine type  = type
Coqine set   = set
Coqine type0 = type0

Coqine Lvl    = Nat (; Universe polymorphism quantification space ;)
Coqine lvl0   = z   (; Nat representation of lowest level (Set)   ;)
Coqine lvlS   = s   (; Nat representation of Type@{i+1}           ;)
Coqine lvlMax = max (; Nat representation of Type@{max(i,j)} ;)
;)



(;-----------------------  LUB wrt Cumulativity  ------------------;)

defac max [Nat].
[i  ] max i z --> i.

[i,j] s (max i j) --> max (s i) (s j).

[i  ] max i i --> i
[i,j] max i (max i j) --> max i j

[i    ] max i (s i) --> s i
[i,j  ] max i (max (s i) j) --> max (s i) j
[i,j  ] max i (s (max i j)) --> s (max i j)
[i,j,k] max (max i k) (s (max i j)) --> max k (s (max i j)).


[s  ] sup prop     s        --> s
[s  ] sup s        prop     --> s
[i,j] sup (type i) (type j) --> type (max i j).


def Leq : Nat -> Nat -> Bool.
[  j  ] Leq z      j         --> true
[i,j  ] Leq (s i)     (s j)     --> Leq i j
[i,j,k] Leq (max i j) k         --> and (Leq i k) (Leq j k)
[i    ] Leq i         i         --> true
[i    ] Leq i         (s i)     --> true
[i,j  ] Leq i         (max i j) --> true
[i,j  ] Leq i         (max (s i) j) --> true.

(;---------------------  CTS Axiom definition  --------------------;)

[   ] Axiom prop     (type _) --> true
[i,j] Axiom (type i) (type j) --> Leq i j.


(;-----------------------  CTS Rule definition  -------------------;)

[     ] Rule _        prop      prop    --> true
[i    ] Rule prop     (type i) (type i) --> true
[i,j,k] Rule (type i) (type j) (type k) --> Leq (max i j) k.


(;-------------------  CTS Cumulativity definition  ---------------;)

[   ] Cumul prop     prop     --> true
[i  ] Cumul prop     (type i) --> true
[i,j] Cumul (type i) (type j) --> Leq i j.



(;------------------------  Other definitions  -------------------;)

(; These functions are provided to simplify the translation.
   - Axiom s (axiom s)       should reduce to true
   - Rule s1 s2 (rule s1 s2) should reduce to true
;)


def axiom : Sort -> Sort.
[]  axiom prop     --> type z
[i] axiom (type i) --> type (s i).
(; Coqine axiom = axiom ;)

[x] Axiom x (axiom x) --> true.

def rule : Sort -> Sort -> Sort.
[s  ] rule prop     s        --> s
[   ] rule _        prop     --> prop
[i,j] rule (type i) (type j) --> type (max i j).
(; Coqine rule = rule ;)

[s1,s2] Rule s1 s2 (rule s1 s2) --> true.
