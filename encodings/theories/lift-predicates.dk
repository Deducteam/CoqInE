

(;-----------------------------------------------------------------;)
(;-------------------------  Coq encoding  ------------------------;)
(;-----------------------------------------------------------------;)

(;----------------------  CTS Sorts definition  -------------------;)

Nat : Type.
z : Nat.
s : Nat -> Nat.

prop : Sort.
type : Nat -> Sort.

def set   : Sort := type z.
def type0 : Sort := type (s z).

def max : Nat -> Nat -> Nat.
[i  ] max i     z     --> i
[  j] max z     j     --> j
[i,j] max (s i) (s j) --> s (max i j).

(;
Coqine sprop = prop
Coqine prop  = prop
Coqine type  = type
Coqine set   = set
Coqine type0 = type0

Coqine Lvl    = Nat (; Universe polymorphism quantification space ;)
Coqine lvl0   = z   (; Nat representation of lowest level (Set)   ;)
Coqine lvlS   = s   (; Nat representation of Type@{i+1}           ;)
Coqine lvlMax = max (; Nat representation of Type@{max(i,j)} ;)
;)


(;---------------------  CTS Axiom definition  --------------------;)

[   ] Axiom prop         (type z    ) --> true.
[   ] Axiom set          (type z    ) --> true.
[   ] Axiom (type z    ) (type (s z)) --> true.
[i,j] Axiom (type (s i)) (type (s j)) --> Axiom (type i) (type j).


(;-----------------------  CTS Rule definition  -------------------;)

[     ] Rule _            prop         prop         --> true.
[i    ] Rule prop         i            i            --> true.
[     ] Rule set          set          set          --> true.
[j    ] Rule set          (type j    ) (type j    ) --> true.
[i    ] Rule (type i    ) set          (type i    ) --> true.
[i    ] Rule (type i    ) (type z    ) (type i    ) --> true.
[j    ] Rule (type z    ) (type j    ) (type j    ) --> true.
[i,j,k] Rule (type (s i)) (type (s j)) (type (s k)) --> Rule (type i) (type j) (type k).


(;-------------------  CTS Cumulativity definition  ---------------;)

[   ] Cumul prop         prop         --> true.
[   ] Cumul prop         set          --> true.
[i  ] Cumul prop         (type i    ) --> true.
[   ] Cumul set          set          --> true.
[i  ] Cumul set          (type i    ) --> true.
[i  ] Cumul (type z)     (type i    ) --> true.
[i,j] Cumul (type (s i)) (type (s j)) --> Cumul (type i) (type j).


def axiom : Sort -> Sort.
[ ] axiom prop     --> (type z)
[ ] axiom set      --> (type z)
[i] axiom (type i) --> (type (s i)).
(; Coqine axiom = axiom ;)

def sup : Sort -> Sort -> Sort.
[   ] sup  prop     prop     --> prop.
[   ] sup  prop     set      --> set.
[   ] sup  set      prop     --> set.
[i  ] sup  prop     (type i) --> type i.
[i  ] sup  set      (type i) --> type i.
[i  ] sup  set      (type i) --> type i.
[i  ] sup  prop     (type i) --> type i.
[i,j] sup  (type i) (type j) --> type (max i j).
(; Coqine sup  = sup ;)

def rule : Sort -> Sort -> Sort.
[   ] rule  _        prop     --> prop
[   ] rule  prop     set      --> set
[   ] rule  set      set      --> set
[i  ] rule  (type i) set      --> type i
[i,j] rule  (type i) (type j) --> type (max i j).
(; Coqine rule = rule ;)
